library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity state_machine is
    Port ( clk : in  STD_LOGIC;
           reset : in  STD_LOGIC;
           input : in  STD_LOGIC;
           output : out  STD_LOGIC);
end state_machine;

architecture Behavioral of state_machine is
    type state_type is (A, B, C);
    signal current_state, next_state : state_type := A;
begin

    -- Process for updating state on the clock edge
    process(clk, reset)
    begin
        if reset = '1' then
            current_state <= A;
        elsif rising_edge(clk) then
            current_state <= next_state;
        end if;
    end process;

    -- Process for checking if state needs to be changed
    process(current_state, input)
    begin
        case current_state is
            when A =>
                if input = '1' then
                    next_state <= B;
                else
                    next_state <= A;
                end if;
            when B =>
                if input = '0' then
                    next_state <= C;
                else
                    next_state <= B;
                end if;
            when C =>
                next_state <= A;
        end case;
    end process;

    -- Process that does the operations that cause a state change to happen
    process(current_state)
    begin
        case current_state is
            when A =>
                output <= '0';
            when B =>
                output <= '1';
            when C =>
                output <= '0';
        end case;
    end process;

end Behavioral;
